#!/usr/bin/env python3
# coding:utf-8
import sys
import os
import argparse
import subprocess

class Crush:

    def __init__(self, args):
        self.args = args;

    def crush(self):
        # First convert each input file into a crushed png.
        files = [];
        colours = self.args["colours"]
        input_size = 0
        for i in range(len(self.args["input"])):
            files.append(self.compress_image(i))
            input_size += os.path.getsize(self.args['input'][i])

        cmd = ['img2pdf', '--output', self.args['output']];
        cmd.extend(files)
        subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        for f in files:
            os.unlink(f)

        outsize = os.path.getsize(self.args['output'])
        print('{}\t{:,.1f}kB ({:.1f}%)'.format(
            self.args['output'],
            outsize/1024,
            outsize*100/input_size
            ))

        return

    def compress_image(self, i):
        colours = self.args["colours"];

        infile = self.args['input'][i]

        # Default to png.
        method = 'png'
        if colours == 2:
            extra_options = [ '-threshold', '50%' ]
        elif colours > 2 and colours < 256:
            extra_options = [ '-colors', str(colours) ]
        else:
            extra_options = [ '-gaussian-blur', '0.05', '-quality', '10' ]
            method = 'jpg'

        cmd = [
            'convert',
            infile,
            '-background', 'white',
            '-flatten',
            '-strip',
            '-level',  '10%,90%',
            ]
        cmd.extend(extra_options)
        outfile = '.image-crush-{}.{}'.format(i, method)
        cmd.append(outfile)

        subprocess.check_output(cmd)
        return outfile

    def compare(self):
        try:
            output = subprocess.check_output(['compare', '-metric', 'MAE', self.args["input"], self.args["output"], 'null:-'], stderr=subprocess.STDOUT).decode('utf-8')
        except subprocess.CalledProcessError as e:
            output = e.output.decode('utf-8')

        new_filesize = os.path.getsize(self.args["output"]);
        split = output.split(' ')
        return {
            "orig_filesize": self.orig_filesize/1024,
            "filesize": new_filesize/1024,
            "size_ratio": self.orig_filesize/new_filesize,
            "quality_abs": float(split[0]),
            "quality_percent": float(split[1].strip('()')),
            "quality_ratio": 100 * float(split[1].strip('()')),
            }


if __name__ == '__main__':
    # Parsing command line args:
    # https://docs.python.org/3.4/library/argparse.html#the-add-argument-method
    parser = argparse.ArgumentParser(description="Brutally compress scanned images into a PDF.")
    # any arg beginning - or -- is optional and can come anywhere. (but make it required by passing required=1)
    # any arg without an action expects one argument to follow
    # default sets initial value (otherwise None)
    # short option is optional
    # parser.add_argument('-o', '--optional', action='store_true')
    # parser.add_argument('-v', '--verbose', action='count', help="verbositiy - use multiple times to increase", default=0)
    # parser.add_argument('-n', '--name', help="Provide an argument")
    parser.add_argument('-c', '--colours', help="2 for black and white, 3 - 255 for indexed (usually expensive), 0 for full.", default=2, type=int)
    # example of positional, required params
    # type sets parse type
    # nargs:
    # 4 require 4 args
    # ? take optional 1 arg. Without arg 'default' is used.
    #   optional args only: With option but no arg 'const' is used.
    # * none or more args follow
    # + one or more args follow
    #parser.add_argument('message', help="something to say", type=str, nargs='+')
    parser.add_argument('output', help="output file (PDF)", type=str)
    parser.add_argument('input', help="input file(s)", type=str, nargs='+')

    args = vars(parser.parse_args())
    print(args)

    crush = Crush(args)
    crush.crush()
