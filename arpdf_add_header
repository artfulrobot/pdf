#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use Pod::Usage;
use PDF::API2;
# http://cpan.uwinnipeg.ca/htdocs/PDF-API2/PDF/API2.html
# http://rick.measham.id.au/pdf-api2/
use File::Temp qw/ :POSIX /;
use constant mm => 25.4 / 72;
use constant in => 1 / 72;
use constant pt => 1;
use constant header_margin => 9/mm;
use constant footer_margin => 9/mm;

# See http://perldoc.perl.org/Getopt/Long.html
# can set default options like this:
my %opts = ( 
		'header'  => '',
		'footer'  => '',
		'overwrite' => 0,
		'outfile' => '',
		'help'    => 0
		);

GetOptions (\%opts, 'header=s', 'footer=s','overwrite!','outfile=s', 'help' );
# typed things
# --------------------------------------------
# string			: filename=s 
# repeated string	: filenames=s@
# bool				: help!  or just 	help
# 					  Nb. --help will set 1, --no-help will set 0
# integer			: count=i
# perl integer		: qty=o
# 					  e.g. --qty=0x20 for 32
# real number		: price=f
#
# typed things: optional values
# --------------------------------------------
# string			: filename:s
# ...

# validate options and throw help back if the dear user has clearly misunderstood
# $opts{'help'}=1 if ( ... );

$opts{'help'} = 1 if (!$opts{'header'}  && ! $opts{'footer'} );
pod2usage(1) if ($opts{'help'} || $#ARGV!=0 );

my $file = $ARGV[0];
die("$file does not exist") unless -r $file;


# set default output
if ( ! $opts{outfile} ) {
	if ($opts{'overwrite'}) { $opts{'outfile'} = $file ; }
	else {
        $opts{'outfile'} = "$file";
        if ( $file =~ m@/@ ) {
            $opts{'outfile'} =~ s@^(.*/)([^/]+)$@$1_$2@;
        } else {
            $opts{'outfile'} =~ s@^@_@;
        }
    }
}

# open input pdf
my $pdf = PDF::API2->open($file);
my %font = (
		Helvetica => {
			Bold   => $pdf->corefont( 'Helvetica-Bold',    -encoding => 'latin1' ),
			Roman  => $pdf->corefont( 'Helvetica',         -encoding => 'latin1' ),
			Italic => $pdf->corefont( 'Helvetica-Oblique', -encoding => 'latin1' ),
			},
		Times => {
			Bold   => $pdf->corefont( 'Times-Bold',   -encoding => 'latin1' ),
			Roman  => $pdf->corefont( 'Times',        -encoding => 'latin1' ),
			Italic => $pdf->corefont( 'Times-Italic', -encoding => 'latin1' ),
			},
		);

# loop through pages
my $pageCount = $pdf->pages;
for (1 .. $pageCount)
{
	my $pageNo = $_;
	my $page = $pdf->openpage ($pageNo);
	my $text = $page->text;
	my $write = '';
	my ($x,$y,$width,$height) = $page->get_cropbox();

	$text->font( $font{'Helvetica'}{'Bold'}, 10/pt );
	$text->fillcolor('black');

	# header
	if ($opts{'header'})
	{
		$write = $opts{'header'};
		$write =~ s/%n/$pageNo/g;
		$write =~ s/%N/$pageCount/g;

		$text->translate( $x +  $width/2, $y + $height - header_margin );
		$text->text_center($write);
	}
	# footer
	if ($opts{'footer'})
	{
		$write = $opts{'footer'};
		$write =~ s/%n/$pageNo/g;
		$write =~ s/%N/$pageCount/g;

		$text->translate( $x +  $width/2, $y + footer_margin );
		$text->text_center($write);
	}
}
# write to outfile then move to specified output
my $outfile = tmpnam();
$pdf->saveas ($outfile);
system('mv', $outfile, $opts{'outfile'});


__END__

=head1 NAME

arpdf_add_header

=head1 SYNOPSIS

arpdf_add_header --header 'this is page %n of %N pages' --footer 'by me.' [opts] file.pdf

=head1 OPTIONS

=over 8

=item B<--header>

Set header text. %n for page No, %N for pages

=item B<--footer>

Set footer text. %n for page No, %N for pages

=item B<--overwrite>

Overwrite the original

=item B<--outfile> FILE

write output to FILE. Default is to write it to original filename with _ prepended

=back

=head1 DESCRIPTION

B<arpdf_add_header> adds a header and/or footer to every page in the PDF.

=cut

